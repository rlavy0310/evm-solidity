//pragma solidity ^0.5.0  环境下，我们可以直接使用codex.length–控制 codex[] 的长度，而高版本的 solc 就补上了这个漏洞（codex.length只是read-only）
//在修改动态数组内某个元素的值的时候，例如 codex[9] = 0x12345678，实质上是将 0x12345678 写入到 存储槽 slot (keccak256(bytes32(1)) + 9)  里面
//根据import关系，slot数据存储排序，再结合读取slot0的数据可知，owner合约的地址与bool参数放在了一个slot里面（slot0）

step1: 我们需要调用makeContact(), 使 contact = true

//codex[n] 的值，就是 第 ( keccak256(bytes32(1)) + n ) 个 slot 的值。如果我们通过构造一个 n ,让 keccak256(bytes32(1)) + n = 0 。
//向上溢出，让keccak256(bytes32(1)) + n=2^256,构造如此大的数组，codex.push() 去填充显然是极其不划算的

step2:可以选择下溢，调用retract() , 让 codex 的长度减 1，可查询到数组大小为0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

//n = 2^256 - keccak256(bytes32(1))。我们计算出 n = 0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a 换算成十进制就是35707666377435648211887908874984608119992236509074197713628505308453184860938

step3:调用 revise（），codex[35707666377435648211887908874984608119992236509074197713628505308453184860938] 的值为 0x0000000000000000000000010x5A4f2Aab2d9ab77a93cae46E978DB26e738603a2
